nodeEnv: production

## Set FDQN for external database host or set `posgresql.enabled` equal to `true`
#databaseHost: postgresql.example.com
## Set external database port or set `postgresql.enabled` equal to `true`
#databasePort: 5672
databaseName: heimdall-database
databaseUsername: postgres
## Set postgres user's password via `openssl rand -hex 33`
# databasePassword: long-random-string-of-text
# databaseSsl: default false
# databaseSslInsecure: default false
# databaseSslKey: path-or-raw-key
# databaseSslCert: path-or-raw-cert
# databaseSslCa: path-or-raw-ca

## Generate the following via `openssl rand -hex 64` and set
# jwtSecret: long-random-string-of-text
## Set `1d` or `25m`
# jwtExpireTime: 25m

## Generate the following via `openssl rand -hex 33` and set
# apiKeySecret = different-long-random-string-of-text

# adminEmail: default admin@heimdall.local
# adminUsesExternalAuth: default false
# adminPassword: default autogenerated (CHECK THE LOGS TO FIND IT)

postgresql:
  enabled: true

  image:
    repository: postgres
    pullPolicy: IfNotPresent
    tag: "13"

  persistence:
    ## Volume used to store the Heimdall's data. Default is boolean `false`.
    enabled: false
    size: "100Mi"
    ## Sets persistent volume claim's storageClassName. Defaults to `default`.
    storageClassName: "default"
    accessMode: "ReadWriteOnce"

  service:
    type: ClusterIP
    port: 5672

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}


heimdall:

  image:
    repository: mitre/heimdall2
    pullPolicy: IfNotPresent
    tag: "2.8.7"

  service:
    type: ClusterIP
    port: 3000

  ingress:
    enabled: true
    hosts:
      - host: localhost
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: heimdall
                port:
                  number: 3000
    annotations:
    #   traefik.ingress.kubernetes.io/router.entrypoints: websecure
    #   traefik.ingress.kubernetes.io/router.tls: "true"
    #   traefik.ingress.kubernetes.io/service.sticky.cookie: "true"
      ## Change this annotation to false if using an ingress that is not the default for the cluster - you will probably also want to set `className`.
      ingressclass.kubernetes.io/is-default-class: "true"
    # className: ingress class name
    # tls:
    #   - name: nginx
    #     secretName: ingress-secret
    #     hosts:
    #       - heimdall.example.com

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}
